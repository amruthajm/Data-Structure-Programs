Given a sorted linked list, delete all duplicates such that each element appear only once.

Example 1:

Input: 1->1->2
Output: 1->2
Example 2:

Input: 1->1->2->3->3
Output: 1->2->3



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    Solution s1;
    public ListNode deleteDuplicates(ListNode head) {
         ListNode temp=head;
        if(head==null){return head;}
         ListNode prev;
        ListNode n=new ListNode(0);
        ListNode m=n;
       Stack<Integer> stack= new Stack<>();
        stack.push(temp.val);
        while(temp.next!=null){
            prev=temp;
            temp=temp.next;
            if(prev.val!=temp.val && temp!=null ){
                stack.push(temp.val);
            }
        }
        Stack<Integer> stack2= new Stack<>();
        while(!stack.isEmpty()){
            stack2.push(stack.pop());
        }
           while(!stack2.isEmpty()){  
               ListNode newnode =new ListNode(stack2.pop());
               n.next=newnode;
               n=n.next;
           }
        return m.next;
    }
}
