Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example:

Input: head = 1->4->3->2->5->2, x = 3
Output: 1->2->2->4->3->5



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        
        ListNode temp=head;
        if(head==null){return head;}
        ListNode n=new  ListNode(0);
         ListNode n1=n;
         ListNode m= new  ListNode(0);
         ListNode m1=m;
        while(temp!=null){
             ListNode newnode=new  ListNode(temp.val);
            if(newnode.val<x){n.next=newnode;
                             n=n.next;}
            else{m.next=newnode;
                m=m.next;}
            temp=temp.next;
        }
        n.next=m1.next;
        return n1.next;
    }
}
